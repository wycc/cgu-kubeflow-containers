# This workflow will build a docker container, publish it to Azure Container Registry, and deploy it to Azure Kubernetes Service using a helm chart.
#
# https://github.com/Azure/actions-workflow-samples/tree/master/Kubernetes
#
# To configure this workflow:
#
# 1. Set up the following secrets in your workspace:
#     a. REGISTRY_USERNAME with ACR username
#     b. REGISTRY_PASSWORD with ACR Password
#     c. AZURE_CREDENTIALS with the output of `az ad sp create-for-rbac --sdk-auth`
#
# 2. Change the values for the REGISTRY_NAME, CLUSTER_NAME, CLUSTER_RESOURCE_GROUP and NAMESPACE environment variables (below).

# DEBUG: This is a temporary CI for testing.  This will be merged into push.yaml when complete, but must be tested on master branch (comment triggers only work on master)
name: push on comment
on:
  push:
    branches:
      # - master  # DEBUG Removed during debugging
      - add-deploy-triggers # DEBUG Added during debugging
  issue_comment:
    types:
      - created

# Environment variables available to all jobs and steps in this workflow
env:
  REGISTRY: k8scc01covidacr.azurecr.io
  REGISTRY_NAME: k8scc01covidacr
  CLUSTER_NAME: k8s-cancentral-01-covid-aks
  CLUSTER_RESOURCE_GROUP: k8s-cancentral-01-covid-aks
jobs:
  # Do initial tests to see if we should run (push or an issue_comment on a PR) or if we should ignore (an issue_comment NOT on a PR)
  # Inspired by https://stackoverflow.com/a/61832535/5394584
  trigger-context:
    runs-on: ubuntu-latest
    outputs:
      allowed_author: ${{ steps.pr_comment_context.outputs.allowed_author }}
      is_pr_comment: ${{ steps.pr_comment_context.outputs.is_pr_comment }}
      pr_number: ${{ steps.pr_comment_context.outputs.pr_number }}
      from_pr_originator: ${{ steps.pr_comment_context.outputs.from_pr_originator }}
      event_ref: ${{ steps.pr_comment_context.outputs.event_ref }}
    steps:
    - uses: ca-scribner/github-actions-recipes/get-pr-comment-context@24abb2d699ce6c7f8374404e4ccc7bd453bdf81a
      id: pr_comment_context
      with: 
        allowed_author_associations: '[OWNER, COLLABORATOR]'
      # TRY TO EXIT WITH SUCCESS ASAP, THEN THE OTHER IF FAILURES CAN CONTINUE?  Not sure
    # - name: am-i-push
    #   if: github.event_name == 'push'
    #   run: exit 0
    # - name: am-i-pr-comment
    #   if: failure() && steps.pr_comment_context.outputs.is_pr_comment
    #   run: exit 0
    # - name: else fail
    #   run: exit 1
    # - name: collect-output
    #   if: !contains
    # Test whether we are either:
    #   a push 
    #   a comment on a PR (eg: not just a comment on a random issue) from a contributor/owner
    - name: am-i-in-scope
      shell: bash
      run: |
        if   [ ${{ github.event_name }} == "push" ] \
          || ([ ${{ steps.pr_comment_context.outputs.is_pr_comment }} == "true" ] && [ ${{steps.pr_comment_context.outputs.allowed_author }} == "true" ]); then
            echo trigger is in scope
            echo "::set-output name=in-scope::true"
        else
            echo trigger is out of scope
            # echo "::set-output name=in-scope::false"  # Don't set anything if false
        fi

  test-print:
    needs:
      trigger-context
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{ needs.trigger-context.outputs.in-scope }}
      - run: echo ${{ needs.trigger-context.outputs.is_pr_comment }}
  build-push:
    needs:
      trigger-context
    if: needs.trigger-context.outputs.in-scope == 'true'  # Could also just be if in-scope, as it'll be empty if false
    strategy:
      fail-fast: false
      matrix:
        notebook:
          - JupyterLab-CPU
          # DEBUG images removed during debugging
          # - JupyterLab-PyTorch
          # - JupyterLab-Tensorflow
          # - RStudio
          # - JupyterLab-CPU-OL-compliant     
    runs-on: ubuntu-latest
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
    - uses: ca-scribner/github-actions-recipes/get-event-ref-on-pr@24abb2d699ce6c7f8374404e4ccc7bd453bdf81a
      id: event_ref
    - uses: actions/checkout@master
    
    # Extra checkout step to ensure we checkout PR's code when this triggers on PR comment
    # Without this, we will always check out master
    - name: Checkout PR code
      if: github.event_name == 'issue_comment'
      run: |
         git fetch origin ${{ steps.event_ref.outputs.event_ref }}
         git checkout FETCH_HEAD

      # DEBUG Does GITHUB_SHA work for issue_comment?
    - name: Add SHORT_SHA env property with commit short sha
      run:  echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV

    - name: Test output folder
      run: |
        sudo apt-get install --yes make
        make all
        if ! git diff --quiet output/; then
            echo 'output folder and docker-bits/resources out of sync!'
            exit 1
        fi

    # Connect to Azure Container registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    # Container build and push to a Azure Container registry (ACR)
    - name: Build image
      run: |
        make all
        COMMIT=$(make get-commit)
        echo
        cd output/${{ matrix.notebook }}
        docker build . --build-arg BASE_VERSION=$COMMIT -t localhost:5000/kubeflow-image:$SHORT_SHA
        docker push localhost:5000/kubeflow-image:$SHORT_SHA
        docker rmi localhost:5000/kubeflow-image:$SHORT_SHA
        docker image prune
        cd -

    # Scan image for vulnerabilities
    - uses: Azure/container-scan@v0
      with:
        image-name: localhost:5000/kubeflow-image:${{ env.SHORT_SHA }}
        severity-threshold: CRITICAL
        run-quality-checks: false

    # Container push to a Azure Container registry (ACR)
    - name: Push image
      run: |
        echo Repull the image
        docker pull localhost:5000/kubeflow-image:$SHORT_SHA
        docker tag localhost:5000/kubeflow-image:$SHORT_SHA kubeflow-image
        echo
        IMAGE_NAME="$(echo ${{ matrix.notebook }} | tr '[:upper:]' '[:lower:]')"
        REGISTRY=${{ env.REGISTRY }}
        echo
        docker tag kubeflow-image $REGISTRY/$IMAGE_NAME:$SHORT_SHA
        docker tag kubeflow-image $REGISTRY/$IMAGE_NAME:${GITHUB_REF#refs/*/}
        docker tag kubeflow-image $REGISTRY/$IMAGE_NAME:latest
        echo
        # DEBUG: Removed during debugging
        # docker push $REGISTRY/$IMAGE_NAME:$SHORT_SHA
        # docker push $REGISTRY/$IMAGE_NAME:${GITHUB_REF#refs/*/}  # I think this breaks for PR comments
        # docker push $REGISTRY/$IMAGE_NAME:latest
        echo
        echo "Pushed $REGISTRY/$IMAGE_NAME:$SHORT_SHA"
        echo "       $REGISTRY/$IMAGE_NAME:${GITHUB_REF#refs/*/}"
        echo "       $REGISTRY/$IMAGE_NAME:latest"
